name: Build Docker Image (multi-arch) and Upload Artifacts

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build-per-arch:
    name: Build (${{ matrix.platform }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [ linux/amd64, linux/arm64 ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Enable emulation so we can cross-build arm64 on x86 runners, etc.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build a SINGLE platform at a time and export a Docker-archive TAR.
      # NOTE: multi-platform cannot be exported as a single local docker archive,
      # so we export one .tar per platform and upload both as artifacts.
      - name: Build ${{ matrix.platform }} â†’ tar
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          pull: true
          # Use a normal, slash-free tag. Avoid invalid tags like "serenityjs:linux/amd64".
          tags: serenityjs:latest
          # Export to a Docker archive tar for THIS platform
          outputs: type=docker,dest=/tmp/serenityjs-${{ matrix.platform == 'linux/amd64' && 'linux-amd64' || 'linux-arm64' }}.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # (Optional) Sanity check: ensure tar can be loaded (doesn't run the image)
      - name: Load tar to validate
        run: |
          docker load -i /tmp/serenityjs-${{ matrix.platform == 'linux/amd64' && 'linux-amd64' || 'linux-arm64' }}.tar
          docker images | grep serenityjs

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: serenityjs-${{ matrix.platform == 'linux/amd64' && 'linux-amd64' || 'linux-arm64' }}
          path: /tmp/serenityjs-${{ matrix.platform == 'linux/amd64' && 'linux-amd64' || 'linux-arm64' }}.tar
          if-no-files-found: error
